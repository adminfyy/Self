@charset "UTF-8";
//-----------------------------------------------------
// mixin & %
// 既定义了mixin也定义了%，根据需求使用@include或@extend调用
//-----------------------------------------------------
//定义media-queries的最小最大宽度

@mixin screen_320(){
  @media screen and ( max-width: 320px) {
    @content;
  }
}

@mixin screen_374(){
  @media screen and ( min-width: 321px) and ( max-width: 374px) {
    @content;
  }
}

@mixin screen_375(){
  @media screen and ( min-width: 321px) and ( max-width: 375px) {
    @content;
  }
}


@mixin screen_445(){
  @media screen and ( min-width: 376px) and ( max-width: 445px) {
    @content;
  }
}

@mixin screen_478(){
  @media screen and ( min-width: 446px) and ( max-width: 478px) {
    @content;
  }
}
@mixin screen_479() {
  @media screen and ( max-width: 479px) {
    @content;
  }
}

@mixin screen_480_767() {
  @media screen and ( min-width: 480px) and ( max-width: 767px) {
    @content;
  }
}

@mixin screen_768_959() {
  @media screen and ( min-width: 768px) and ( max-width: 959px) {
    @content;
  }
}

@mixin screen_768_939() {
  @media screen and ( min-width: 768px) and ( max-width: 939px) {
    @content;
  }
}

@mixin screen_960_1199() {
  @media screen and ( min-width: 960px) and ( max-width: 1199px) {
    @content;
  }
}

@mixin screen_1200() {
  @media screen and ( min-width: 1200px) {
    @content;
  }
}

@mixin min-screen($res) {
  @media screen and ( min-width: $res+"px") {
    @content;
  }
}
@mixin screen($res-min, $res-max)
{
  @media screen and ( min-width: $res-min +"px" ) and ( max-width: $res-max +"px" ) {
    @content;
  }
}
@mixin max-screen($res) {
  @media screen and ( max-width: $res+"px") {
    @content;
  }
}
// clearfix
// 闭合子元素的浮动
@mixin clearfix ($extend:true) {
  @if $extend {
    @extend %clearfix;
  }
  @else {
    &:before,
    &:after {
      content: "";
      display: table;
    }
    &:after {
      clear: both;
    }
  }
}

%clearfix {
  @include clearfix(false);
}

// Text overflow
// 元素可以设置宽度才可应用省略号
@mixin ellipsis($width:false) {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  @if $width {
    width: $width;
  }
}

@mixin border( $direction, $size, $borderColor) {
  @if $direction==top {
    border-top: $size solid $borderColor;
  }
  @else if $direction==right {
    border-right: $size solid $borderColor;
  }
  @else if $direction==bottom {
    border-bottom: $size solid $borderColor;
  }
  @else if $direction==left {
    border-left: $size solid $borderColor;
  }
}

%break-word {
  word-break: break-all;
  word-wrap: break-word;
}

%border-card {
  border-radius: 5px;
}
/**
 * [em 图片]
 * @method em
 * @param  {[type]} $w         [description]
 * @param  {[type]} $h         [description]
 * @param  {[type]} $img       [description]
 * @param  {[type]} $position1 [description]
 * @param  {[type]} $position2 [description]
 * @return {[type]}            [description]
 */
@mixin anmi-em($w, $h, $img, $position1, $position2) {
  width: $w/2+px;
  height: $h/2+px;
  background: url($imageUrl + $img) no-repeat;
  background-size: 100%;
  background-position: $position1/2+px $position2/2+px;
}

@mixin position-point($t, $r, $b, $l) {
  position: absolute;
  @if $t != false {
    top: $t;
  }
  @if $r != false {
    right: $r;
  }
  @if $b != false {
    bottom: $b;
  }
  @if $l != false {
    left: $l;
  }
}

@mixin margin-point($t, $r, $b, $l) {
  @if $t != false {
    margin-top: $t;
  }
  @if $r != false {
    margin-right: $r;
  }
  @if $b != false {
    margin-bottom: $b;
  }
  @if $l != false {
    margin-left: $l;
  }
}

@mixin flex($n) {
  flex: $n;
}

@mixin border-radius($n) {
  border-radius: $n+px;
}

// 各个浏览器的属性前缀，true表示开启，false表示不开启
//-----------------------------------------------------
$prefixForWebkit: true !default;
$prefixForMozilla: true !default;
$prefixForMicrosoft: true !default;
$prefixForOpera: false !default;
//opera从版本15开始转向webkit，所以默认为false，不输出o前缀
$prefixNo: true !default;
// prefixer
// 用于在属性上加前缀
// 默认这里将只输出webkit前缀和标准（如果要开启opera的可以将$prefixForOpera设置为true）
//-----------------------------------------------------
@mixin prefixer($property, $value, $prefixes: o webkit) {
  @each $prefix in $prefixes {
    @if $prefix == webkit and $prefixForWebkit == true {
      -webkit-#{$property}: $value;
    } @else if $prefix == moz and $prefixForMozilla == true {
      -moz-#{$property}: $value;
    } @else if $prefix == ms and $prefixForMicrosoft == true {
      -ms-#{$property}: $value;
    } @else if $prefix == o and $prefixForOpera == true {
      -o-#{$property}: $value;
    }
  }
  @if $prefixNo {
    #{$property}: $value;
  }
}
@mixin css3($property, $value) {
  @include prefixer($property, $value, webkit moz ms o spec);
}
// 常见状态吗的样式
@mixin statusCodeCss($imgUrl){
   .status-code-main {
       margin-top: 45px;
       height: 100%;
      .status-code-content {
        display: inline-block;
        margin: 80px auto 0 auto;
        width: 100%;
        height: 240px;
        .status-code-backimg {
          display: inline-block;
          width: 100%;
          height: 90%;
          background: url($imageUrl + $imgUrl) no-repeat center;
          background-size: 50%;
          @include screen_768_959{
              background-size: 20%
          }
          @include screen_1200 {
          background-size: 15%
          }
          @include screen_960_1199 {
          background-size: 17%
          }
          @include screen_768_959 {
          background-size: 20%
          }
          @include screen_480_767 {
            background-size: 35%
          }
        }
        .status-code-txt {
          font-size: 16px;
          text-align: center;
          color: #666;
       }
     }
   }

}
